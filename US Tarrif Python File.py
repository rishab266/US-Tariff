# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10rZl1w9GwtUNwDnr8NcPjcCOqKVX4sUe

# Task
Tell me about this dataset.

Here is all the data you need:
"Tariff Calculations plus Population.csv"
"Tariff Calculations.csv"

## Data loading

### Subtask:
Load the two CSV files into pandas DataFrames.

**Reasoning**:
Import pandas and load the two CSV files into pandas DataFrames, then display the first 5 rows of each DataFrame.
"""

import pandas as pd

try:
    df_pop = pd.read_csv('Tariff Calculations plus Population.csv')
    df_tariff = pd.read_csv('Tariff Calculations.csv')
    display(df_pop.head())
    display(df_tariff.head())
except FileNotFoundError:
    print("Error: One or both of the CSV files were not found.")
except pd.errors.ParserError:
    print("Error: There was an issue parsing the CSV files. Check their format.")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""**Reasoning**:
The previous attempt failed due to a parsing error.  I will try again with a different method. I'll attempt to read both files using a different separator and check for encoding issues.


"""

import pandas as pd

try:
    # Try different separators and encodings
    for sep in [',', ';', '\t']:
        for encoding in ['utf-8', 'latin-1', 'ISO-8859-1']:
            try:
                df_pop = pd.read_csv('Tariff Calculations plus Population.csv', sep=sep, encoding=encoding)
                df_tariff = pd.read_csv('Tariff Calculations.csv', sep=sep, encoding=encoding)
                display(df_pop.head())
                display(df_tariff.head())
                break  # Exit inner loop if successful
            except pd.errors.ParserError:
                continue  # Try the next separator/encoding
            except FileNotFoundError:
                print("Error: One or both CSV files not found.")
                break # Exit inner loop if file not found
        else:
            continue # Try next separator if all encodings failed
        break # Exit outer loop if successful
    else:
        print("Error: Could not parse CSV files with any combination of separators and encodings.")

except Exception as e:
    print(f"An unexpected error occurred: {e}")

"""## Data exploration

### Subtask:
Explore the loaded datasets to understand their structure and content.

**Reasoning**:
Explore the datasets by examining their shape, data types, missing values, descriptive statistics, unique values, and unique columns.
"""

# Examine the shape of each DataFrame
print("Shape of df_pop:", df_pop.shape)
print("Shape of df_tariff:", df_tariff.shape)

# Check data types and missing values
print("\nInfo for df_pop:")
print(df_pop.info())
print("\nMissing values in df_pop:")
print(df_pop.isnull().sum())

print("\nInfo for df_tariff:")
print(df_tariff.info())
print("\nMissing values in df_tariff:")
print(df_tariff.isnull().sum())

# Descriptive statistics
print("\nDescriptive statistics for df_pop:")
print(df_pop.describe(include='all'))
print("\nDescriptive statistics for df_tariff:")
print(df_tariff.describe(include='all'))

# Explore unique values for categorical columns
print("\nUnique values in 'Country' column of df_pop:")
print(df_pop['Country'].unique())

print("\nValue counts for 'Trump Tariffs Alleged' in df_pop:")
print(df_pop['Trump Tariffs Alleged'].value_counts())

print("\nUnique values in 'Country' column of df_tariff:")
print(df_tariff['Country'].unique())

print("\nValue counts for 'Trump Tariffs Alleged' in df_tariff:")
print(df_tariff['Trump Tariffs Alleged'].value_counts())

# Identify unique columns
pop_unique_cols = set(df_pop.columns) - set(df_tariff.columns)
tariff_unique_cols = set(df_tariff.columns) - set(df_pop.columns)

print("\nUnique columns in df_pop:", pop_unique_cols)
print("Unique columns in df_tariff:", tariff_unique_cols)

"""**Reasoning**:
The previous code block output shows that some columns, like 'US 2024 Deficit', 'US 2024 Exports', and 'US 2024 Imports (Customs Basis)' in both dataframes, are of object type, which suggests they might be strings instead of numerical values.  We need to convert these columns to numeric types to perform numerical operations and calculations correctly.  Also, the 'Trump Tariffs Alleged' and 'Trump Response' columns seem to contain percentage values that need cleaning.  We also need to handle the missing values in 'Population' column of df_pop.  Finally, the descriptive statistics are not very informative because of the presence of strings in numeric columns. We should address these issues before proceeding.


"""

import pandas as pd
import numpy as np

# Convert relevant columns to numeric, coercing errors to NaN
for col in ['US 2024 Deficit', 'US 2024 Exports', 'US 2024 Imports (Customs Basis)']:
    df_pop[col] = pd.to_numeric(df_pop[col], errors='coerce')
    df_tariff[col] = pd.to_numeric(df_tariff[col], errors='coerce')

# Clean 'Trump Tariffs Alleged' and 'Trump Response' columns
def clean_percentage(x):
    if isinstance(x, str) and '%' in x:
        return float(x.replace('%', '')) / 100
    return x

for col in ['Trump Tariffs Alleged', 'Trump Response']:
    df_pop[col] = df_pop[col].apply(clean_percentage)
    df_tariff[col] = df_tariff[col].apply(clean_percentage)

# Handle missing values in 'Population' (fill with median)
df_pop['Population'] = df_pop['Population'].fillna(df_pop['Population'].median())

# Recalculate descriptive statistics after cleaning
print("\nDescriptive statistics for df_pop after cleaning:")
print(df_pop.describe(include='all'))

print("\nDescriptive statistics for df_tariff after cleaning:")
print(df_tariff.describe(include='all'))

print("\nMissing values in df_pop after cleaning:")
print(df_pop.isnull().sum())

print("\nMissing values in df_tariff after cleaning:")
print(df_tariff.isnull().sum())

"""## Data comparison

### Subtask:
Compare the two dataframes, `df_pop` and `df_tariff`, focusing on common columns.

**Reasoning**:
Compare the two dataframes based on common columns, identify discrepancies, and analyze the relationship between tariff calculations and population.
"""

# Identify common columns
common_cols = list(set(df_pop.columns) & set(df_tariff.columns))
print(f"Common columns: {common_cols}")

# Compare values in common columns
comparison_results = {}
for col in common_cols:
    comparison_results[col] = df_pop[col].compare(df_tariff[col])
    print(f"\nComparison of column '{col}':")
    display(comparison_results[col])

# Check if df_pop is a superset of df_tariff (excluding 'Population')
subset_cols = list(set(df_tariff.columns) - {'Country'})
is_superset = df_pop[subset_cols].equals(df_tariff[subset_cols])
print(f"\nIs df_pop a superset of df_tariff (excluding 'Population'): {is_superset}")

# Identify unique columns
pop_unique_cols = set(df_pop.columns) - set(df_tariff.columns)
tariff_unique_cols = set(df_tariff.columns) - set(df_pop.columns)
print(f"\nUnique columns in df_pop: {pop_unique_cols}")
print(f"Unique columns in df_tariff: {tariff_unique_cols}")

# Analyze tariff calculations in relation to population
print("\nAnalysis of tariff calculations in relation to population:")
# Example analysis (you can add more sophisticated analysis here)
# Calculate the correlation between population and tariff variables
correlation_tariff_pop = df_pop['Population'].corr(df_pop['Trump Tariffs Alleged'])
print(f"Correlation between Population and Trump Tariffs Alleged: {correlation_tariff_pop}")
correlation_response_pop = df_pop['Population'].corr(df_pop['Trump Response'])
print(f"Correlation between Population and Trump Response: {correlation_response_pop}")

"""## Data analysis

### Subtask:
Analyze the relationships between variables within and across the datasets, focusing on the impact of population on tariff calculations.

**Reasoning**:
Calculate correlation coefficients between 'Population' and tariff-related variables in df_pop, group data by tariff categories, and identify potential outliers.  This addresses the first four points of the subtask instructions.
"""

import pandas as pd
import numpy as np

# 1. Correlation Analysis
numerical_cols = ['US 2024 Deficit', 'US 2024 Exports', 'US 2024 Imports (Customs Basis)', 'Trump Tariffs Alleged', 'Trump Response']
correlations = df_pop['Population'].corr(df_pop[numerical_cols])
print("Correlation between Population and other variables:\n", correlations)


# 2. Grouped Analysis
grouped_data = df_pop.groupby(['Trump Tariffs Alleged', 'Trump Response'])['Population'].agg(['mean', 'median', 'std'])
print("\nGrouped descriptive statistics for Population:\n", grouped_data)

# 4. Outlier Detection (using IQR method)
Q1 = df_pop['Population'].quantile(0.25)
Q3 = df_pop['Population'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = df_pop[(df_pop['Population'] < lower_bound) | (df_pop['Population'] > upper_bound)]
print("\nPotential outliers in Population:\n", outliers)

# 5. Data Visualization Suggestions
visualization_suggestions = [
    "Scatter plots of 'Population' vs. each numerical tariff variable to visualize correlations.",
    "Box plots of 'Population' grouped by 'Trump Tariffs Alleged' and 'Trump Response' to compare distributions.",
    "Histograms of 'Population' to observe its distribution and identify potential outliers.",
    "A scatter plot matrix to visualize relationships between 'Population' and all numerical tariff variables.",
]
print("\nData Visualization Suggestions:\n", visualization_suggestions)

"""**Reasoning**:
The error `ValueError: operands could not be broadcast together with shapes (204,) (204,5)` in the correlation calculation arises because `.corr()` is being used incorrectly.  It needs two Series, not a Series and a DataFrame.  I will correct this by iterating through the numerical columns and computing correlations one by one.


"""

import pandas as pd
import numpy as np

# 1. Correlation Analysis
numerical_cols = ['US 2024 Deficit', 'US 2024 Exports', 'US 2024 Imports (Customs Basis)', 'Trump Tariffs Alleged', 'Trump Response']
correlations = {}
for col in numerical_cols:
    correlations[col] = df_pop['Population'].corr(df_pop[col])
print("Correlation between Population and other variables:\n", correlations)

# 2. Grouped Analysis
grouped_data = df_pop.groupby(['Trump Tariffs Alleged', 'Trump Response'])['Population'].agg(['mean', 'median', 'std'])
print("\nGrouped descriptive statistics for Population:\n", grouped_data)

# 4. Outlier Detection (using IQR method)
Q1 = df_pop['Population'].quantile(0.25)
Q3 = df_pop['Population'].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
outliers = df_pop[(df_pop['Population'] < lower_bound) | (df_pop['Population'] > upper_bound)]
print("\nPotential outliers in Population:\n", outliers)

# 5. Data Visualization Suggestions
visualization_suggestions = [
    "Scatter plots of 'Population' vs. each numerical tariff variable to visualize correlations.",
    "Box plots of 'Population' grouped by 'Trump Tariffs Alleged' and 'Trump Response' to compare distributions.",
    "Histograms of 'Population' to observe its distribution and identify potential outliers.",
    "A scatter plot matrix to visualize relationships between 'Population' and all numerical tariff variables.",
]
print("\nData Visualization Suggestions:\n", visualization_suggestions)

"""## Data visualization

### Subtask:
Visualize the relationships between population and tariff-related variables, and the distributions of key variables.

**Reasoning**:
Create the visualizations specified in the instructions using the cleaned data in df_pop.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# 1. Scatter Plots
numerical_cols = ['US 2024 Deficit', 'US 2024 Exports', 'US 2024 Imports (Customs Basis)', 'Trump Tariffs Alleged', 'Trump Response']
plt.figure(figsize=(15, 10))
for i, col in enumerate(numerical_cols):
    plt.subplot(2, 3, i + 1)
    sns.regplot(x='Population', y=col, data=df_pop, scatter_kws={'alpha':0.5}, line_kws={'color':'red'})
    plt.title(f'Population vs. {col}')
    plt.xlabel('Population')
    plt.ylabel(col)
plt.tight_layout()
plt.show()

# 2. Grouped Box Plots
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
sns.boxplot(x='Trump Tariffs Alleged', y='Population', data=df_pop)
plt.title('Population Distribution by Trump Tariffs Alleged')

plt.subplot(1, 2, 2)
sns.boxplot(x='Trump Response', y='Population', data=df_pop)
plt.title('Population Distribution by Trump Response')

plt.tight_layout()
plt.show()

# 3. Histogram
plt.figure(figsize=(8, 6))
sns.histplot(df_pop['Population'], kde=True)
plt.title('Distribution of Population')
plt.xlabel('Population')
plt.ylabel('Frequency')
plt.show()

# 4. Scatter Plot Matrix (Optional)
# Due to the number of variables, a simple pairplot might be too dense.
# Instead, we create a subsetted pairplot with the most relevant variables
# to avoid extreme clutter.
sns.pairplot(df_pop[['Population', 'US 2024 Exports', 'US 2024 Imports (Customs Basis)', 'Trump Tariffs Alleged']], diag_kind="kde")
plt.suptitle("Pairwise Relationships of Population and Key Tariff Variables", y=1.02)
plt.show()

"""## Future impact analysis

### Subtask:
Analyze potential future impacts of tariff changes or population shifts on tariff calculations.

**Reasoning**:
Based on the data exploration and visualization, define scenarios, quantify their impact, and discuss limitations and interpretations.  Since the correlations between population and tariff variables were weak, the impact quantification will be based on hypothetical changes and assumptions rather than strong statistical relationships.
"""

import pandas as pd
import numpy as np

# Scenario 1: 5% increase in tariffs across all countries
df_pop_scenario1 = df_pop.copy()
df_pop_scenario1['Trump Tariffs Alleged'] = df_pop_scenario1['Trump Tariffs Alleged'] * 1.05
# Hypothetical impact: Assume a direct proportional relationship between tariffs and trade deficit
df_pop_scenario1['US 2024 Deficit'] = df_pop_scenario1['US 2024 Deficit'] * 1.05

# Scenario 2: 10% decrease in population in specific countries
df_pop_scenario2 = df_pop.copy()
# Select countries with populations above the median
high_pop_countries = df_pop[df_pop['Population'] > df_pop['Population'].median()]
for country in high_pop_countries['Country']:
    df_pop_scenario2.loc[df_pop_scenario2['Country'] == country, 'Population'] = df_pop_scenario2.loc[df_pop_scenario2['Country'] == country, 'Population'] * 0.9

# Hypothetical impact: Assume a proportional impact on exports
df_pop_scenario2['US 2024 Exports'] = df_pop_scenario2['US 2024 Exports'] * 0.9

# Scenario 3: Combined changes (5% tariff increase and 10% population decrease in high-pop countries)
df_pop_scenario3 = df_pop.copy()
df_pop_scenario3['Trump Tariffs Alleged'] = df_pop_scenario3['Trump Tariffs Alleged'] * 1.05
df_pop_scenario3['US 2024 Deficit'] = df_pop_scenario3['US 2024 Deficit'] * 1.05
high_pop_countries = df_pop[df_pop['Population'] > df_pop['Population'].median()]
for country in high_pop_countries['Country']:
    df_pop_scenario3.loc[df_pop_scenario3['Country'] == country, 'Population'] = df_pop_scenario3.loc[df_pop_scenario3['Country'] == country, 'Population'] * 0.9
df_pop_scenario3['US 2024 Exports'] = df_pop_scenario3['US 2024 Exports'] * 0.9

# Data Limitations
print("Data Limitations:")
print("1. Weak correlations between population and tariff variables limit the accuracy of predictions.")
print("2. Hypothetical relationships are used due to lack of empirical evidence.")
print("3. The scenarios are simplified representations of complex interactions.")

# Scenario Interpretation
print("\nScenario Interpretations:")
print("Scenario 1: A 5% tariff increase might lead to a proportional increase in trade deficits, but this is a simplified assumption.")
print("Scenario 2: A 10% population decrease in high-population countries could reduce exports, but the exact impact is uncertain.")
print("Scenario 3: The combined scenario shows the potential for both increased deficits and reduced exports.")
print("Uncertainty: The predictions are highly uncertain due to the simplifying assumptions and weak correlations.")

"""## Summary:

### 1. Q&A

No questions were explicitly asked in the provided data analysis task.  However, the task implicitly asks for an understanding of the data, its relationships, and potential future impacts. The analysis provides answers to these implicit questions through exploration, comparison, analysis, visualization, and hypothetical scenario generation.


### 2. Data Analysis Key Findings

* **Data Inconsistencies:** Significant discrepancies were found between the two datasets, particularly in the 'Country' column and several numerical columns.  For example, Afghanistan in `df_pop` is matched with China in `df_tariff`.  Several numerical columns had missing values after converting their data type from string to numeric.
* **Weak Correlations:**  Correlations between population and tariff-related variables were generally weak (e.g., correlation between 'Population' and 'US 2024 Exports' is 0.1368).  This limits the accuracy of predictions based on these relationships.
* **Population Outliers:** Potential outliers in the 'Population' column were identified using the IQR method. Further investigation into these outliers might be valuable.
* **Hypothetical Scenario Impacts:**  Hypothetical scenarios (5% tariff increase, 10% population decrease, and a combination of both) suggest potential impacts on trade deficits and exports.  However, the results are highly uncertain due to the simplified assumptions used.


### 3. Insights or Next Steps

* **Data Validation and Cleaning:** Prioritize thorough data validation and cleaning to address inconsistencies in the 'Country' column and missing values in numerical columns.  Consider merging the two datasets based on reliable country identifiers after cleaning.
* **Explore Non-linear Relationships:**  Given the weak linear correlations observed, investigate potential non-linear relationships between population and tariff variables using more advanced statistical methods or machine learning models.  Explore other factors that could be influencing the relationship.

"""